{
  "include": ["src/**/*"],
  "exclude": ["node_modules/**/*"],
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* （TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度）Enable incremental compilation */
    "target": "es5",                          /* （目标语言的版本）Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "commonjs",                     /* （生成代码的模板标准）Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["DOM", "ES2017.Object"],                 /* （TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"）Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* （允许编译器编译JS，JSX文件）Allow javascript files to be compiled. */
    // "checkJs": true,                       /* （允许在JS文件中报错，通常与 allowJs 一起使用）Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                   /* （生成声明文件，开启后会自动生成声明文件）Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* （生成声明文件的 map 映射文件，通常与 declaration 一起使用）Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* （生成目标文件的 sourceMap 文件）Generates corresponding '.map' file. */
    // "outFile": "./",                       /* （将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD"）Concatenate and emit output to single file. */
    "outDir": "./dist",                        /* （指定输出目录）Redirect output structure to the directory. */
    // "rootDir": "./",                       /* （指定输出文件目录，用于控制输出目录结构）Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* （）Enable project compilation */
    // "tsBuildInfoFile": "./",               /* （增量编译文件的存储位置）Specify file to store incremental compilation information */
    // "removeComments": true,                /* （删除注释）Do not emit comments to output. */
    // "noEmit": true,                        /* （不输出文件,即编译后不会生成任何js文件）Do not emit outputs. */
    // "importHelpers": true,                 /* （通过 tslib 引入 helper 函数，文件必须是模块）Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* （降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现）Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* （）Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* （开启所有严格的类型检查）Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* （不允许隐式的 any 类型）Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* （不允许把 null、undefined 赋值给其他类型的变量）Enable strict null checks. */
    // "strictFunctionTypes": true,           /* （不允许函数参数双向协变）Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* （严格的 bind / call / apply 检查）Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* （类的实例属性必须初始化）Enable strict checking of property initialization in classes. */
    "noImplicitThis": false,                /* （不允许 this 有隐式的any类型）Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* （在代码中注入 'use strict' ）Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* （检查只声明、未使用的局部变量(只提示不报错)）Report errors on unused locals. */
    // "noUnusedParameters": true,            /* （检查未使用的函数参数(只提示不报错)）Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* （每个分支都会有返回值）Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* （防止switch语句贯穿(即如果没有break语句后面不会执行)）Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* （模块解析策略，ts默认用node的解析策略，即相对的方式导入）Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* （解析非相对模块的基地址，默认是当前目录）Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* （路径映射，相对于baseUrl，如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置"jquery": ["node_modules/jquery/dist/jquery.min.js"]）A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* （将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错）List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* （声明文件目录，默认时node_modules/@types）List of folders to include type definitions from. */
    // "types": [],                           /* （加载的声明文件包）Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* （允许从没有默认导出的模块中默认导入）Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                   /* （允许export=导出，由import from 导入）Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* （）Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* （允许在模块中全局变量的方式访问umd模块）Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* （）Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* （）Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* （）Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* （）Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* （）Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* （）Enables experimental support for emitting type metadata for decorators. */
  }
}
